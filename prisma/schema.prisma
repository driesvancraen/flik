// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  agents        Agent[]
  apiKeys       ApiKey[]
}

enum UserRole {
  USER
  ADMIN
}

model Agent {
  id              String    @id @default(cuid())
  name            String
  description     String?
  systemPrompt    String    @db.Text
  firstMessage    String    @db.Text
  isPublic        Boolean   @default(false)
  shareId         String?   @unique @default(cuid())
  llmProvider     LLMProvider
  llmModel        String
  llmTemperature  Float     @default(0.7)
  llmMaxTokens    Int       @default(1000)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgeBase   KnowledgeBase?
  conversations   Conversation[]

  @@index([userId])
}

enum LLMProvider {
  OPENAI
  ANTHROPIC
  GEMINI
  MISTRAL
}

model KnowledgeBase {
  id        String    @id @default(cuid())
  name      String
  agentId   String    @unique
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  documents Document[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Document {
  id              String        @id @default(cuid())
  name            String
  type            DocumentType
  content         String        @db.Text
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([knowledgeBaseId])
}

enum DocumentType {
  PDF
  DOC
  URL
  TEXT
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  provider    LLMProvider
  key         String
  isActive    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model Conversation {
  id        String    @id @default(cuid())
  agentId   String
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([agentId])
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           MessageRole
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
